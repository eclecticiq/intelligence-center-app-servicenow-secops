<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sn_sec_core_integration_item">
    <sn_sec_core_integration_item action="INSERT_OR_UPDATE">
        <banner_logo>d3115ec2db78fb0052bcf9afaa9619b0</banner_logo>
        <capabilities>39344d4f0b273200263a089b37673ab1</capabilities>
        <categories>900e912b53221200158b7cbe1ec5877e</categories>
        <configurable>true</configurable>
        <create_child_integration_item>false</create_child_integration_item>
        <description/>
        <external_link/>
        <help_link/>
        <install_script/>
        <installed>false</installed>
        <max_child_integration_item/>
        <name>EclecticIQ Platform - Threat Lookup</name>
        <order>100</order>
        <parent/>
        <plugin_id>com.snc.threat.intelligence</plugin_id>
        <short_description>EclecticIQ Platform integration. Threat intelligence lookup.</short_description>
        <sys_class_name>sn_sec_core_integration_item</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-04-03 16:49:49</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_id>db4ec11edb64330072d884da0b9619f8</sys_id>
        <sys_mod_count>43</sys_mod_count>
        <sys_name>EclecticIQ Platform - Threat Lookup</sys_name>
        <sys_package display_value="EclecticIQ Platform - Threat Lookup" source="x_336871_eclectici">b62b8956db64330072d884da0b96192e</sys_package>
        <sys_policy/>
        <sys_scope display_value="EclecticIQ Platform - Threat Lookup">b62b8956db64330072d884da0b96192e</sys_scope>
        <sys_update_name>sn_sec_core_integration_item_db4ec11edb64330072d884da0b9619f8</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-05-02 12:52:46</sys_updated_on>
        <validation_script><![CDATA[validate(sysId, values);

function validate(sysId, values){
	//Set the value of "result" variable to non empty string if validation fails	
	var configs = getConfigurationByIntItemConfigId(sysId);
	
	var newURL = values[configs.platform_url.sys_id];
	var newUser = values[configs.platform_user.sys_id];
	var newPassword = values[configs.platform_password.sys_id];
	var newSightingsStatus = values[configs.platform_sightings_auto.sys_id];
	var newSightingsGroup = values[configs.platform_group.sys_id];
	
	var restMessage = new sn_ws.RESTMessageV2("EclecticIQ auth", "post");
	restMessage.setStringParameter("platform_url", newURL);
	var obj = {
		'username': newUser,
		'password': newPassword
	};
	var str = JSON.stringify(obj);
	restMessage.setRequestBody(str);

	var response = restMessage.execute();
	var responseError = response.getErrorMessage();
	var httpStatus = response.getStatusCode();

 	if (httpStatus != 200) {
 		result = "Unsuccessful auth token response from server. Response: " + responseError;
		return result;
 	}
	
	if (newSightingsStatus) {		
		var parsed_response = JSON.parse(responseBody);
		var auth_token = "Bearer " + parsed_response.token;		
		var GroupRestMessage = new sn_ws.RESTMessageV2("EclecticIQ get group", "get");
		
		GroupRestMessage.setStringParameter("group_name", newSightingsGroup);
		GroupRestMessage.setStringParameter("platform_url", newURL);
		GroupRestMessage.setRequestHeader("Authorization", auth_token);

		var GroupResponse = GroupRestMessage.execute();
		var GroupResponseBody = GroupResponse.getBody();
		var GroupHttpStatus = GroupResponse.getStatusCode();

		var parsed_response_group = JSON.parse(GroupResponseBody);
	
		try {
			var group_id = parsed_response_group.data[0].source;

			return result;
		} catch (e){
			if (GroupHttpStatus != 200) {
				result = "Unsuccessful response from server. HTTP Status: " + GroupHttpStatus;
				return result;
			}

			result = "No " + newSightingsGroup + " group name found.";
			return result;
		}
	}

	return result;
}

function getConfigurationByIntItemConfigId(intItemConfigId){	
	var configs = new GlideRecord("sn_sec_core_integration_item_config");
	configs.addQuery("integration", intItemConfigId);
	configs.query();
		
	var configObj = {};
	while (configs.next()) {
		configObj[configs.getValue("name")] = {
			sys_id: configs.getUniqueValue(),
			name: configs.getValue("name"),
			label: configs.getValue("label"),
			value: configs.getValue("value")
		};

		// Note this script is common code across all integrations but must be duplicated otherwise the 
		// getDecryptedValue fails due to cross scope.
		if (configs.getValue("elem_type").toLowerCase() == "password" && !gs.nil(configs.password_value)) 
			configObj[configs.getValue("name")].value = configs.password_value.getDecryptedValue();

		if (configs.getValue("elem_type") == "boolean") 
		configObj[configs.getValue("name")].value = configs.getValue("value") == "true";
	}	
	return configObj;
}]]></validation_script>
    </sn_sec_core_integration_item>
</record_update>
